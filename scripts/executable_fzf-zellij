#!/usr/bin/env bash
# fzf-zellij: starts fzf in a zellij pane
# usage: fzf-zellij [LAYOUT OPTIONS] [--] [FZF OPTIONS]

fail() {
  >&2 echo "$1"
  exit 2
}

fzf="$(command which fzf)" || fzf="$(dirname "$0")/fzf"
[[ -x "$fzf" ]] || fail 'fzf executable not found'

args=()
opt=""
skip=""
swap=""
close=""
term=""
[[ -n "$LINES" ]] && lines=$LINES || lines=$(tput lines) || lines=$(zellij display-message -p "#{pane_height}")
[[ -n "$COLUMNS" ]] && columns=$COLUMNS || columns=$(tput cols) || columns=$(zellij display-message -p "#{pane_width}")

zellij_version=$(zellij -V | sed 's/[^0-9.]//g')
zellij_32=$(awk '{print ($1 >= 3.2)}' <<< "$zellij_version" 2> /dev/null || bc -l <<< "$zellij_version >= 3.2")

help() {
  >&2 echo 'usage: fzf-zellij [LAYOUT OPTIONS] [--] [FZF OPTIONS]

  LAYOUT OPTIONS:
    (default layout: -d 50%)

    Popup window (requires zellij 3.2 or above):
      -p [WIDTH[%][,HEIGHT[%]]]  (default: 50%)
      -w WIDTH[%]
      -h HEIGHT[%]
      -x COL
      -y ROW

    Split pane:
      -u [HEIGHT[%]]             Split above (up)
      -d [HEIGHT[%]]             Split below (down)
      -l [WIDTH[%]]              Split left
      -r [WIDTH[%]]              Split right
'
  exit
}

opt="-E"

while [[ $# -gt 0 ]]; do
  arg="$1"
  shift
  [[ -z "$skip" ]] && case "$arg" in
    -)
      term=1
      ;;
    --help)
      help
      ;;
    --version)
      echo "fzf-zellij (with fzf $("$fzf" --version))"
      exit
      ;;
    # -p*|-w*|-h*|-x*|-y*|-d*|-u*|-r*|-l*)
    #   if [[ "$arg" =~ ^-[pwhxy] ]]; then
    #     [[ "$opt" =~ "-E" ]] || opt="-E"
    #   elif [[ "$arg" =~ ^.[lr] ]]; then
    #     opt="-h"
    #     if [[ "$arg" =~ ^.l ]]; then
    #       opt="$opt -d"
    #       swap="; swap-pane -D ; select-pane -L"
    #       close="; zellij swap-pane -D"
    #     fi
    #   else
    #     opt=""
    #     if [[ "$arg" =~ ^.u ]]; then
    #       opt="$opt -d"
    #       swap="; swap-pane -D ; select-pane -U"
    #       close="; zellij swap-pane -D"
    #     fi
    #   fi
    #   if [[ ${#arg} -gt 2 ]]; then
    #     size="${arg:2}"
    #   else
    #     if [[ "$1" =~ ^[0-9%,]+$ ]] || [[ "$1" =~ ^[A-Z]$ ]]; then
    #       size="$1"
    #       shift
    #     else
    #       continue
    #     fi
    #   fi

    #   if [[ "$arg" =~ ^-p ]]; then
    #     if [[ -n "$size" ]]; then
    #       w=${size%%,*}
    #       h=${size##*,}
    #       opt="$opt -w$w -h$h"
    #     fi
    #   elif [[ "$arg" =~ ^-[whxy] ]]; then
    #     opt="$opt ${arg:0:2}$size"
    #   elif [[ "$size" =~ %$ ]]; then
    #     size=${size:0:((${#size}-1))}
    #     if [[ $zellij_32 = 1 ]]; then
    #       if [[ -n "$swap" ]]; then
    #         opt="$opt -l $(( 100 - size ))%"
    #       else
    #         opt="$opt -l $size%"
    #       fi
    #     else
    #       if [[ -n "$swap" ]]; then
    #         opt="$opt -p $(( 100 - size ))"
    #       else
    #         opt="$opt -p $size"
    #       fi
    #     fi
    #   else
    #     if [[ -n "$swap" ]]; then
    #       if [[ "$arg" =~ ^.l ]]; then
    #         max=$columns
    #       else
    #         max=$lines
    #       fi
    #       size=$(( max - size ))
    #       [[ $size -lt 0 ]] && size=0
    #       opt="$opt -l $size"
    #     else
    #       opt="$opt -l $size"
    #     fi
    #   fi
    #   ;;
    --)
      # "--" can be used to separate fzf-zellij options from fzf options to
      # avoid conflicts
      skip=1
      continue
      ;;
    *)
      args+=("$arg")
      ;;
  esac
  [[ -n "$skip" ]] && args+=("$arg")
done

if [[ -z "$ZELLIJ" ]]; then
  "$fzf" "${args[@]}"
  exit $?
fi

# * --height option is not allowed
# * CTRL-Z is also disabled
# * fzf-zellij script is not compatible with --zellij option in fzf 0.53.0 or later
args=("${args[@]}" "--no-height")

# Handle zoomed zellij pane without popup options by moving it to a temp window
# if [[ ! "$opt" =~ "-E" ]] && zellij list-panes -F '#F' | grep -q Z; then
#   zoomed_without_popup=1
#   original_window=$(zellij display-message -p "#{window_id}")
#   tmp_window=$(zellij new-window -d -P -F "#{window_id}" "bash -c 'while :; do for c in \\| / - '\\;' do sleep 0.2; printf \"\\r\$c fzf-zellij is running\\r\"; done; done'")
#   zellij swap-pane -t $tmp_window \; select-window -t $tmp_window
# fi

set -e

# Clean up named pipes on exit
id=$RANDOM
argsf="${TMPDIR:-/tmp}/fzf-args-$id"
fifo1="${TMPDIR:-/tmp}/fzf-fifo1-$id"
fifo2="${TMPDIR:-/tmp}/fzf-fifo2-$id"
fifo3="${TMPDIR:-/tmp}/fzf-fifo3-$id"
running="${TMPDIR:-/tmp}/fzf-running-$id"
# if zellij_win_opts=$(zellij show-options -p remain-on-exit \; show-options -p synchronize-panes 2> /dev/null); then
#   zellij_win_opts=( $(sed '/ off/d; s/synchronize-panes/set-option -p synchronize-panes/; s/remain-on-exit/set-option -p remain-on-exit/; s/$/ \\;/' <<< "$zellij_win_opts") )
#   zellij_off_opts='; set-option -p synchronize-panes off ; set-option -p remain-on-exit off'
# else
#   zellij_win_opts=( $(zellij show-window-options remain-on-exit \; show-window-options synchronize-panes | sed '/ off/d; s/^/set-window-option /; s/$/ \\;/') )
#   zellij_off_opts='; set-window-option synchronize-panes off ; set-window-option remain-on-exit off'
# fi
cleanup() {
  \rm -f $argsf $fifo1 $fifo2 $fifo3 $running

  if [[ $# -gt 0 ]]; then
    trap - EXIT
    exit 130
  fi
}
trap 'cleanup 1' SIGUSR1
trap 'cleanup' EXIT

envs="export TERM=$TERM "
    FZF_DEFAULT_OPTS="--border $FZF_DEFAULT_OPTS"
envs="$envs FZF_DEFAULT_COMMAND=$(printf %q "$FZF_DEFAULT_COMMAND")"
envs="$envs FZF_DEFAULT_OPTS=$(printf %q "$FZF_DEFAULT_OPTS")"
envs="$envs FZF_DEFAULT_OPTS_FILE=$(printf %q "$FZF_DEFAULT_OPTS_FILE")"
[[ -n "$RUNEWIDTH_EASTASIAN" ]] && envs="$envs RUNEWIDTH_EASTASIAN=$(printf %q "$RUNEWIDTH_EASTASIAN")"
[[ -n "$BAT_THEME" ]] && envs="$envs BAT_THEME=$(printf %q "$BAT_THEME")"
echo "$envs;" > "$argsf"
echo "" >> "$argsf"

# Build arguments to fzf
opts=$(printf "%q " "${args[@]}")

pppid=$$
echo -n "trap 'kill -SIGUSR1 -$pppid' EXIT SIGINT SIGTERM;touch $running;" >> $argsf
close=";rm -f $running; trap - EXIT SIGINT SIGTERM $close"

mkfifo -m o+w $fifo2
cat $fifo2 &
if [[ -n "$term" ]] || [[ -t 0 ]]; then
  cat <<< "\"$fzf\" $opts > $fifo2; out=\$? $close; exit \$out" >> $argsf
else
  mkfifo $fifo1
  cat <<< "\"$fzf\" $opts < $fifo1 > $fifo2; out=\$? $close; exit \$out" >> $argsf
  cat <&0 > $fifo1 &
fi

zellij run -f -c --pinned true --cwd "$PWD" -- bash $argsf > /dev/null 2>&1

while [[ ! -e $running ]]; do sleep 0.05; done
while [[ -e $running ]]; do sleep 0.05; done

exit $?

mkfifo -m o+w $fifo3
if [[ -n "$term" ]] || [[ -t 0 ]]; then
  cat <<< "\"$fzf\" $opts > $fifo2; echo \$? > $fifo3 $close" >> $argsf
else
  mkfifo $fifo1
  cat <<< "\"$fzf\" $opts < $fifo1 > $fifo2; echo \$? > $fifo3 $close" >> $argsf
  cat <&0 > $fifo1 &
fi
cat $fifo2
exit "$(cat $fifo3)"